import mongoose from "mongoose";
import jwt from "jsonwebtoken";
import bcrypt from "bcrypt";

const userSchema = new mongoose.Schema(
  {
    fullName: {
      type: String,
      required: true,
      trim: true,
      index: true,
    },
    username: {
      type: String,
      required: true,
      unique: true,
      trim: true,
      lowercase: true,
      index: true,
    },
    email: {
      type: String,
      match: /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/,
      required: true,
      unique: true,
      trim: true,
      lowercase: true,
    },
    password: {
      type: String,
      required: [true, "Password is required"],
    },
    avatar: {
      type: String, // Cloudnary URL
      required: true,
    },
    coverImage: {
      type: String, //  URL
    },
    bio: {
      type: String,
      max: 100,
      trim: true,
    },
    watchHistory: [
      {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Video",
      },
    ],
    refreshToken: {
      type: String,
    },
  },
  {
    timestamps: true,
  }
);
// Encrypt password before saving
// what is pre here?
// pre is a middleware function that runs before a specific event. In this case, the save event.
// The save event is triggered when you save a document in MongoDB.
// The middleware function takes a callback function that runs before saving the document.
// The callback function is an async function that hashes the password with bcrypt.
// The password is hashed with 10 rounds of salt.
// The hashed password is then saved in the document.
// The next function is called to move on to the next middleware function.
userSchema.pre("save", async function (next) {
  if (this.isModified("password")) {
    this.password = await bcrypt.hash(this.password, 10);
  }
  next();
});

// Compare password
// what is methods here?
// methods is a property of the schema that allows you to define instance methods.
// The comparePassword method is an instance method that takes a password as an argument.
// The method compares the password with the hashed password in the document.
// The method returns a boolean value indicating whether the password is correct.
userSchema.methods.comparePassword = async function (password) {
  return await bcrypt.compare(password, this.password);
};

// what is jwt token?
// JWT stands for JSON Web Token. It is a token that is used to authenticate users.
// The token is generated by the server and sent to the client.
// The client sends the token with each request to authenticate the user.
// The token is a string that contains a payload of data.

// Generate access token
// what is generateAccessToken here?
// The generateAccessToken method is an instance method that generates an access token.
// what is access token?
// An access token is a token that is used to authenticate users.
// The token is generated by the server and sent to the client.
// The client sends the token with each request to authenticate the user.
// The method takes no arguments.
userSchema.methods.generateAccessToken = function () {
  return jwt.sign(
    {
      _id: this._id,
      username: this.username,
      email: this.email,
      fullName: this.fullName,
    },
    process.env.ACCESS_TOKEN_SECRET,
    { expiresIn: process.env.ACCESS_TOKEN_LIFE }
  );
};

// Generate refresh token
// what is generateRefreshToken here?
// The generateRefreshToken method is an instance method that generates a refresh token.
// what is refresh token?
// A refresh token is a token that is used to refresh the access token.
// The token is generated by the server and sent to the client.
// The client sends the token with each request to refresh the access token.
// The method takes no arguments.
userSchema.methods.generateRefreshToken = function () {
  return jwt.sign(
    {
      _id: this._id,
    },
    process.env.REFRESH_TOKEN_SECRET,
    { expiresIn: process.env.REFRESH_TOKEN_LIFE }
  );
};

export const User = mongoose.model("User", userSchema);
